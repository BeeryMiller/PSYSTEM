*PMKER3  2/22/89.2
*ADD TRAP VECTOR (STO)
*ADD BREAKPOINT CODE

*CONSIDER CHANGE TO CPOOL USAGE, CURRENTLY IT IS ADDRESS OF CONSTANT
*   POOL OF CURRENT SEG WHICH MAY CHANGE IF SEGMENTS ARE MOVED BY
*   SYSTEM.  IF CURRENT SEGMENTS ARE NOT MOVED BY SYSTEM THIS IS NO
*   PROBLEM

* * * * * * * * * * * * *
*CHANGES TO NEW MEMORY MAPPING
* * * * * * * * * * *  *


***************************************************
*CODE POOL MANAGEMENT: (REVISED 1/22/88)

*  'FULL ADDRESS' AS USED IN CODE POOL DESCRIPTOR:

*   TYPICALLY THESE ARE HANDLED IN R6,R7 FOR MOST MEMORY ACCESS STUFF

*       WORD 1: MSB=0
*               LSB=HI BYTE OF 24 BIT ADDRESS (MYARC FORMAT)
*               AS USED TO ACCESS CODE POOLS.  CODE POOL ADDRESSES
*               START AT >10000.

*       WORD 2: LO WORD OF 24 BIT ADDRESS
*


****P-MACHINE PSEUDO REGISTER
SIB     DATA    0       PTR TO CURRENT SIB  <CHGSIB>
EREC    DATA    0       "    "    "    EREC <CHGSIB>

*****************
*THESE ADDRESSES MUST STAY IN SAME RELATIVE LOCATIONS FOR
*USE BY LPR & SPR
READYQ  DATA    0
EVEC    DATA    0       PTR TO CURRENT EVEC
CURTSK  DATA    ROOTSK  PTR TO CURRENT TASK'S SIB
PTRS
*PTRS=^CURTSK+2 FOR BACK-INDEXING
******************

CURPRO  DATA    0       CURRENTLY EXECUTING PROCESS

CURPOL  BSS     2       HI WORD OF CURRENT POOL ADDR <CHGSIB>
CPOOL   BSS     2       LO-WORD ADDRESS OF CURRENT CONSTANT POOL
*                       <CHKSEX>
IPCFLT  BSS     2       STORAGE FOR COPY OF IPC (FAULT HANDLING)
BASE    BSS     2       GLOBAL DATA PTR <CHGSIB>

*SYSTEM VARIABLES

ASMPRC  DATA    0       ASSBY PROC FLAG
BLANK   DATA    >2020   USED BY IDSEARCH
CPOFST  DATA    0       BYTE OFFSET IN CONSTANT POOL <CHKSEX>
FSTWRD  DATA    0       USED BY SRS ROUTINE
BADUNT  DATA    2       IO RESULT FOR BADUNIT
IDEND   DATA    0       USED BY IDSEARCH
INOUNT  DATA    9       IO RESULT FOR INOUNIT
IBDBLK  DATA    17      IO RESULT FOR BAD BLOCK SPEC
LSTWRD  DATA    0       USED BY SRS
NEWSP   DATA    0       USED BY SET COMPARE
ONEWRD  DATA    0       USED BY SRS ROUTINE
SAMEWD  DATA    0       USED BY SRS ROUTINE
SYSRTN  DATA    0       RETURN ADDRESS SAVE
SAVBK   DATA    0       SAVE BACK ON SETMAPS
SAVRTN  DATA    0       ADDRESS SAVE
SAVR0   DATA    0       USED BY SHERIFF
SAVR1   DATA    0       USED BY SHERIFF
SAVSYM  DATA    0       USED BY IDSEARCH
SAVREC  DATA    0       USED BY ERROR ROUTINE
SEGHI   DATA    0       PTR TO TOP OF SEGMENT <CHKSEX>
SEGNDX  DATA    0       INDEX INTO SEGTABLE (IN SYSCOM)
SEXOK   DATA    0       FLAGS IF SEX OF CURRENT SEG OK <CHKSEX>
SKPCHK  DATA    0       FLAG FOR BLDFRM TO DECIDE STACK CHECK
STATLK  DATA    0       USED IN PROCEDURE CALLS
STKEXT  DATA    0       PASS REQD BY STACK EXTENSION
STSRCH  DATA    0       USED BY IDSEARCH
SVEREC  DATA    0
TEMP    DATA    0
ZERWRD  DATA    0       USED BY SRS


************************************************************
* P MACHINE CENTRAL LOOP                                   *
* OPERANDS ARE PREFETCHED; UPON ENTRY INTO CODE R3 CONTAINS*
* LAST OPCODE; R4=NEXT TO LAST; R5=NEXT TO R4 ETC          *
* R0=PRE-FETCH ADDRESS                                     *
* R1=DOUBLED COPY OF P-CODE VALUE                          *
* R2=ADDRESS OF P-CODE ROUTINE                             *
************************************************************

        B       @TSKSCH
BACK    NOP             THIS GETS FILLED IN IF
*                       NEEDED BY TASK SWITCHING ROUTINE

       IF   DEBUG
        BL      @CHKBK  CHECK FOR BREAK POINT
       C    @0,@SVZERO
       JEQ  $0
       DATA >2C40
$0     NOP

       FI
        BL      @NXTBYT GET P-CODE
        MOV     R15,R1
        SLA     R1,1    BYTE OFFSET INTO TABLE
        MOV     @OPTABL(R1),R2 INDEX THRU OPTABLE
        MOV     *R2+,R0 GET PREFETCH ADDRESS
        B       *R0

       IF DEBUG
*RECONSTRUCTED AFTER HARD DISK CRASH
*9/6/88
BRKPT  DATA 0           POINTER TO BREAKPOINT OFFSET
CHKBK   MOV     @BRKPT,R1
        JEQ     CHKB1   BRKPOINT NOT SET IF 0
        C       R1,IPC    STOP HERE?
        JEQ     BKVCTR  RIGHT AT BREAKPOINT
        JGT     CHKB1   R1>IPC (NOT THERE YET)
        S       IPC,R1
        NEG     R1      FIX THE SIGN
        CI      R1,4    ARE WE LESS THAN 4 BYTES PASS THE BREAK?
        JLT     BKVCTR  YES, TREAT IT LIKE BREAKPOINT
        JMP     CHKB1  NO SO CONTINUE

BKVCTR DATA >2C40        PLACE BREAK VECTOR HERE
CHKB1   RT



*****************************************************
*DEBUG OPCODE TEST LOOP
*ENTRY:
*       R15=OPCODE
*       R3,4,5=PARAMETERS
*       SP=STACK POINTER

TEST1   MOV     R15,R1
        SLA     R1,1    OFFSET
        LI      BK,TEST1
        MOV     @OPTABL(R1),R2
        INCT    R2      STEP PAST PREFETCH JUMP
TEST2   B       *R2     JUMP TO CODE


***************************************************
*DEBUG STO TEST TRAP
*
*CHECK STO INSTRUCTION FOR ACCESS TO CRITICAL ADDRESSES
*COMPARES THE ADDRESS AT CHKADR WITH POINTER AT SP-1

LOWFEN DATA >0000
CHKADR  DATA    0       PLACE TRAP ADDRESS HERE
CHKSTO  C       @2(SP),@CHKADR   SEE IF BEING ACCESSED
        JNE     CHKST1
*
CHKVCT NOP              PLACE BREAK VECTOR HERE
CHKST1 RT
*
       FI


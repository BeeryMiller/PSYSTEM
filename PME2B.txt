*PME2B 6/06/89.1

*LOAD PROCESS REGISTER
LPR     DATA    2+$
        MOV     *SP,R2  GET REGISTER #
        SLA     R2,1    BYTE OFFSET
        JLT     LPR1    NEGATIVE ARGUMENT
        CI      R2,28
        JGT     LPR2    INVALID VALUE
        BL      @SAVREG  (SAVREG ALSO USED BY TASKSWITCH ROUTINES)
        A       @CURTSK,R2 INDEX INTO TIB
        MOV     *R2,*SP  GET CONTENTS OF REGISTER
        B       *BK

LPR1    CI      R2,-6
        JLT     LPR2    INVALID REGISTER
        MOV     @PTRS(R2),*SP
LPR2    B       *BK

*STORE PROCESS REGISTER
SPR     DATA    2+$
        MOV     *SP+,R0 POP NEW REG VALUE
        MOV     *SP+,R2 POP REGISTER #
        SLA     R2,1    BYTE REG OFFSET
        JLT     SPR1    NEGATIVE REG #
        CI      R2,28
        JGT     SPR2    INVALID REGISTER
        BL      @SAVREG
        A       @CURTSK,R2 OFFSET INTO TIB
        MOV     R0,*R2  UPDATE REGISTER INDICATED
        MOV     BK,R11  PREPARE TO RETURN TO LOOP
        B       @RESTOR

SPR1    CI      R2,-6
        JLT     SPR2    INVALID REGISTER
        MOV     R0,@PTRS(R2)
SPR2    B       *BK

*******************************************************
* PACKED FIELD INSTRUCTIONS
* (PERFORM NO RUNTIME ERROR CHECKING AS WRITTEN)

ONMSK   DATA    0,1,3,7,>F,>1F,>3F,>7F,>FF
        DATA    >1FF,>3FF,>7FF,>FFF,>1FFF,>3FFF,>7FFF,>FFFF

*COMPLEMENTS OF ONMSK VALUES
OFFMSK  DATA    >FFFF,>FFFE,>FFFC,>FFF8,>FFF0,>FFE0,>FFC0
        DATA    >FF80,>FF00,>FE00,>FC00,>F800,>F000,>E000
        DATA    >C000,>8000,>0


LDP     DATA    2+$
        MOV     *SP+,R0 RIGHTMOST BIT OF FIELD
        MOV     *SP+,R2 POP FIELD WIDTH
        SLA     R2,1
        MOV     *SP+,R3 ADDR OF WORD CONTAINING FIELD
        MOV     *R3,R3  WORD INDICATED
        MOV     R0,R0
        JEQ     LDP1    NOSHIFT
        SRL     R3,0    RIGHT SHIFT BY COUNT IN R0
LDP1    MOV     @OFFMSK(R2),R4 LOAD THE MASKS
        SZC     R4,R3
        DECT    SP
        MOV     R3,*SP
        B       *BK

*STORE PACKED FIELD
STP     DATA    2+$
        MOV     *SP+,R1 DATA VAL FROM TOS
        MOV     *SP+,R0 FIELD RIGHTMOST BIT
        MOV     *SP+,R2 FIELD WIDTH
        MOV     R2,R3
        A       R0,R3   OFFSET OF LEFT MASK
        SLA     R3,1    BYTE OFFSET
        MOV     @OFFMSK(R3),R3  LEFT MASK SET
        MOV     R0,R4   COPY FIELD RIGHT BIT
        SLA     R4,1    BYTE OFFSET
        MOV     @ONMSK(R4),R4   RIGHT MASK SET
        SOC     R4,R3   COMPLETE DEST MASK SET
        INV     R3      FORMAT 0000111100000 ETC
        MOV     *SP+,R4 DESTINATION ADDRESS
        SZC     R3,*R4  CLEAR OUT OLD VALUE
        MOV     R0,R0
        JEQ     STP1    AVOID ZERO BIT SHIFT
        SLA     R1,0    MOVE LEFT BY THE COUNT IN R0
*
STP1   INV  R3
       SZC  R3,R1             mask value before insertion -pc 1/6/91
*
        SOC     R1,*R4  INSERT INTO ADDRESS
        B       *BK

*INDEX A PACKED FIELD
IXP     DATA    GET2
        CLR     R0      PREP FOR DIVS
        MOV     *SP+,R1 POP INDEX
        DIV     R4,R0   R4=ELEMENTS/WORD
        SLA     R0,1    BYTE INDEX
        A       R0,*SP  POINTS TO WORD CONTAINING FIELD
        DECT    SP
        MOV     R3,*SP  SIZE OF FIELD
        MOV     R1,R0   GET REMAINDER FROM DIVISION
        MPY     R3,R0   MPY BY FIELD WIDTH
        DECT    SP
        MOV     R1,*SP  PUSH FIELD RIGHTMOST BIT #
        B       *BK


*************LOGICAL AND INTEGER COMPARISONS

LAND    DATA    2+$     LOGICAL AND
        INV     *SP
        SZC     *SP+,*SP IS THIS RELIABLE FOR ALL 9900 FAMILY?
        B       *BK

LOR     DATA    2+$     LOGICAL OR
        SOC     *SP+,*SP
        B       *BK

LNOT    DATA    2+$     LOGICAL NOT
        INV     *SP
        B       *BK

BNOT    DATA    2+$     BOOLEAN NOT
        INV     *SP
        MOV     *SP,R1
        ANDI    R1,>1
        MOV     R1,*SP
        B       *BK

ABI     DATA    2+$     ABSOLUTE INTEGER
        ABS     *SP
        B       *BK

INCI    DATA    2+$     INCREMENT INTEGER
        INC     *SP
        B       *BK

DECI    DATA    2+$     DECREMENT INTEGER
        DEC     *SP
        B       *BK

ADI     DATA    2+$     ADD INTEGERS
        A       *SP+,*SP
        B       *BK

NGI     DATA    2+$     TWO'S COMPLEMENT TOS
        NEG     *SP
        B       *BK

SBI     DATA    2+$
        S       *SP+,*SP
        B       *BK

MODI1   BSS     2       TEMP STORAGE
MODI    DATA    2+$
        MOV     *SP+,R3 DENOMINATOR
        JEQ     DIVERR  DIVIDE BY ZERO ERROR!
        MOV     *SP,R2  NUMERATOR
*                       SIGN(RESULT)=SIGN(NUMER)
        MOV     R2,@MODI1 STUFF IT HERE
        ABS     R3
        ABS     R2
        CLR     R1      PREP FOR DIVIDE
        DIV     R3,R1
        MOV     @MODI1,R3  GET ORIG NUMER
        JGT     MODI2   IF NUMER POSITIVE
        JEQ     MODI2   OR ZERO
        NEG     R2
MODI2   MOV     R2,*SP  PUSH REMAINDER
        B       *BK

